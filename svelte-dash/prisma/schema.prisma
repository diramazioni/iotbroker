// schema.prisma


// js client
// generator client {
//  provider = "prisma-client-js"
// }

// python client
generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio" // 'sync'
  recursive_type_depth = 5
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Device {
  id          Int       @id @default(autoincrement())
  name        String
  calibration Boolean?
  timestamp   BigInt   

  // Relation to measurements
  etrometers  ETRometer[]
  weatherStation WeatherStation?
}

model WeatherStation {
  id            Int    @id @default(autoincrement())
  timestamp   String 
  Battery_Voltage Float
  Solar_Panel_Voltage Float
  Temperature   Float
  Pressure      Float
  Humidity      Float
  GasResistance Float
  Altitude      Float
  Ts_1          Float
  Ts_2          Float
  Ts_3          Float
  Us_1          Float
  Us_2          Float
  Us_3          Float
  W_vel         Float
  W_dir         Float
  device   Device @relation(fields: [deviceId], references: [id])
  deviceId Int @unique
}

model ETRometer {
  id       Int      @id @default(autoincrement())
  timestamp   String   
  name     String
  charge   Float 
  CO2      Float
  TC       Float 
  RH       Float 
  // Relation to Device model
  device   Device @relation(fields: [deviceId], references: [id])
  deviceId Int 
}

model Units {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  value   String
  type    String

  //ETR     ETRometer[]
  //WeatherStation WeatherStation[]
  
  // One-to-one relationship with WeatherStation
  //weatherStation WeatherStation? @relation(fields: [weatherStationId], references: [id])
  //weatherStationId Int? //@unique // Unique identifier for the associated WeatherStation

  // One-to-one relationship with ETRometer
  //etrometer ETRometer? @relation(fields: [etrometerId], references: [id])
  //etrometerId Int? @unique // Unique identifier for the associated ETRometer
}